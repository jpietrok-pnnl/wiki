(function() {
  var async, execFile, fs, github, glob, https, jsonfile, startServer;

  fs = require('fs');

  glob = require('glob');

  async = require('async');

  jsonfile = require('jsonfile');

  https = require('https');

  execFile = require('child_process').execFile;

  github = function(path, done) {
    var options, req;
    options = {
      host: 'raw.githubusercontent.com',
      port: 443,
      method: 'GET',
      path: path
    };
    return req = https.get(options, function(res) {
      var data;
      res.setEncoding('utf8');
      data = '';
      res.on('data', function(d) {
        return data += d;
      });
      return res.on('end', function() {
        return done(data);
      });
    });
  };

  startServer = function(params) {
    var admin, app, argv, bundle, farm, info, path, plugmap, route, view;
    app = params.app;
    argv = params.argv;
    bundle = null;
    github('/fedwiki/wiki/master/package.json', function(data) {
      return bundle = {
        date: Date.now(),
        data: JSON.parse(data)
      };
    });
    route = function(endpoint) {
      return "/plugin/plugmatic/" + endpoint;
    };
    path = function(file) {
      return argv.packageDir + "/" + file;
    };
    info = function(file, done) {
      var authors, birth, factory, packagejson, pages, plugin, site;
      plugin = file.slice(12);
      site = {
        plugin: plugin
      };
      birth = function(cb) {
        return fs.stat(path(file + "/client/" + plugin + ".js"), function(err, stat) {
          var ref;
          site.birth = stat != null ? (ref = stat.birthtime) != null ? ref.getTime() : void 0 : void 0;
          return cb();
        });
      };
      pages = function(cb) {
        var synopsis;
        synopsis = function(slug, cb2) {
          return jsonfile.readFile(path(file + "/pages/" + slug), {
            throws: false
          }, function(err, page) {
            var ref, ref1, ref2, ref3, title;
            title = page.title || slug;
            synopsis = ((ref = page.story) != null ? (ref1 = ref[0]) != null ? ref1.text : void 0 : void 0) || ((ref2 = page.story) != null ? (ref3 = ref2[1]) != null ? ref3.text : void 0 : void 0) || 'empty';
            return cb2(null, {
              file: file,
              slug: slug,
              title: title,
              synopsis: synopsis
            });
          });
        };
        return fs.readdir(path(file + "/pages"), function(err, slugs) {
          return async.map(slugs || [], synopsis, function(err, pages) {
            site.pages = pages;
            return cb();
          });
        });
      };
      packagejson = function(cb) {
        return jsonfile.readFile(path(file + "/package.json"), {
          throws: false
        }, function(err, packagejson) {
          site["package"] = packagejson;
          return cb();
        });
      };
      factory = function(cb) {
        return jsonfile.readFile(path(file + "/factory.json"), {
          throws: false
        }, function(err, factory) {
          site.factory = factory;
          return cb();
        });
      };
      authors = function(cb) {
        return fs.readFile(path(file + "/AUTHORS.txt"), 'utf-8', function(err, authors) {
          site.authors = authors;
          return cb();
        });
      };
      return async.series([birth, authors, packagejson, factory, pages], function(err) {
        return done(null, site);
      });
    };
    plugmap = function(done) {
      return glob("wiki-plugin-*", {
        cwd: argv.packageDir
      }, function(err, files) {
        if (err) {
          return done(err, null);
        }
        return async.map(files || [], info, function(err, install) {
          if (err) {
            return done(err, null);
          }
          return done(null, install);
        });
      });
    };
    view = function(plugin, done) {
      var pkg;
      if (/^\w+$/.test(plugin)) {
        pkg = "wiki-plugin-" + plugin;
        return execFile('npm', ['view', "" + pkg, '--json'], function(err, stdout, stderr) {
          var npm;
          try {
            npm = JSON.parse(stdout);
          } catch (undefined) {}
          return done(null, {
            plugin: plugin,
            pkg: pkg,
            npm: npm
          });
        });
      }
    };
    farm = function(req, res, next) {
      if (argv.f) {
        return next();
      } else {
        return res.status(404).send({
          error: 'service requires farm mode'
        });
      }
    };
    admin = function(req, res, next) {
      var ref, ref1, ref2, ref3, user;
      if (app.securityhandler.isAdmin(req)) {
        return next();
      } else {
        if (!argv.admin) {
          admin = "none specified";
        }
        if (!(((ref = req.session) != null ? (ref1 = ref.passport) != null ? ref1.user : void 0 : void 0) || ((ref2 = req.session) != null ? ref2.email : void 0) || ((ref3 = req.session) != null ? ref3.friend : void 0))) {
          user = "not logged in";
        }
        return res.status(403).send({
          error: 'service requires admin user',
          admin: admin,
          user: user
        });
      }
    };
    app.get(route('page/:slug.json'), function(req, res) {
      return plugmap(function(err, install) {
        var i, j, k, len, len1, p, ref;
        for (j = 0, len = install.length; j < len; j++) {
          i = install[j];
          ref = i.pages;
          for (k = 0, len1 = ref.length; k < len1; k++) {
            p = ref[k];
            if (p.slug === req.params.slug) {
              return jsonfile.readFile(path(p.file + "/pages/" + p.slug), {
                throws: false
              }, function(err, page) {
                return res.json(page);
              });
            }
          }
        }
        return res.sendStatus(404);
      });
    });
    app.get(route('file/:file/slug/:slug'), function(req, res) {
      return jsonfile.readFile(path(req.params.file + "/pages/" + req.params.slug), {
        throws: false
      }, function(err, page) {
        if (err) {
          return res.sendStatus(404);
        } else {
          return res.json(page);
        }
      });
    });
    app.get(route('sitemap.json'), function(req, res) {
      return plugmap(function(err, install) {
        var i, ref;
        return res.json((ref = []).concat.apply(ref, (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = install.length; j < len; j++) {
            i = install[j];
            results1.push(i.pages);
          }
          return results1;
        })()));
      });
    });
    app.get(route('plugins'), function(req, res) {
      return glob("wiki-plugin-*", {
        cwd: argv.packageDir
      }, function(err, files) {
        if (err) {
          return res.e(err);
        }
        return async.map(files || [], info, function(err, install) {
          if (err) {
            return res.e(err);
          }
          return res.json({
            install: install,
            bundle: bundle
          });
        });
      });
    });
    app.post(route('plugins'), function(req, res) {
      var installed, payload, published;
      payload = {
        bundle: bundle
      };
      installed = function(cb) {
        var files, plugin;
        files = (function() {
          var j, len, ref, results1;
          ref = req.body.plugins || [];
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            plugin = ref[j];
            results1.push("wiki-plugin-" + plugin);
          }
          return results1;
        })();
        return async.map(files || [], info, function(err, install) {
          payload.install = install;
          return cb();
        });
      };
      published = function(cb) {
        return async.map(req.body.plugins || [], view, function(err, results) {
          payload.publish = results;
          return cb();
        });
      };
      return async.parallel([installed, published], function(err) {
        return res.json(payload);
      });
    });
    app.get(route('view/:pkg'), function(req, res) {
      var pkg;
      if (/^\w+$/.test(req.params.pkg)) {
        pkg = "wiki-plugin-" + req.params.pkg;
        res.setHeader('Content-Type', 'application/json');
        return execFile('npm', ['view', "" + pkg, '--json']).stdout.pipe(res);
      }
    });
    app.post(route('install'), admin, function(req, res) {
      var pkg;
      if (/^\w+$/.test(req.body.plugin) && /^[\w.]+$/.test(req.body.version)) {
        pkg = "wiki-plugin-" + req.body.plugin + "@" + req.body.version;
        console.log("plugmatic installing " + pkg);
        return execFile('npm', ['install', "" + pkg, '--json'], {
          cwd: argv.packageDir + '/..'
        }, function(err, stdout, stderr) {
          var npm;
          try {
            npm = JSON.parse(stdout);
          } catch (undefined) {}
          if (err) {
            return res.status(400).json({
              error: 'server unable to install plugin',
              npm: npm,
              stderr: stderr
            });
          } else {
            return info("wiki-plugin-" + req.body.plugin, function(err, row) {
              return res.json({
                installed: req.body.version,
                npm: npm,
                stderr: stderr,
                row: row
              });
            });
          }
        });
      }
    });
    return app.post(route('restart'), admin, function(req, res) {
      console.log('plugmatic exit to restart');
      res.sendStatus(200);
      return process.exit(0);
    });
  };

  module.exports = {
    startServer: startServer
  };

}).call(this);

//# sourceMappingURL=server.js.map
